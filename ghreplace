#!/usr/bin/env bash
#
# ghreplace - replace local git repo with GitHub repo
#
# Replace a local src tree with GitHub repo content, remove local git repo
#
# Copyright (c) 2016,2021,2023-2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!


# setup
#
export VERSION="1.0.0 2025-03-17"
export GITHUB_USER="lcn2"
export LOCAL_SRC_TREE="/usr/local/src/bin"
export LOCAL_GIT_TREE="/usr/local/git"
export GITHUB_REPO_BASE="git@github.com:$GITHUB_USER"
export GITHUB_USER_URL="https://github.com/$GITHUB_USER"
export N_FLAG=
export V_FLAG=
NAME=$(basename "$0")
export NAME
#
export USAGE="usage: $NAME [-h] [-v] [-V] [-n] [-g gittree] [-s srctop] [-u user] dirname

    -h		print help and exit
    -v		be verbose
    -V          print version string and exit

    -n		do not change anything

    -s srctop	path to top of source above name (def: $LOCAL_SRC_TREE)
    -g gittree	path to local git tree (def: $LOCAL_GIT_TREE)
    -u user	GitHub username (def: $GITHUB_USER)
		    default GitHub Repo base: $GITHUB_REPO_BASE
		    default GitHub Repo URL: $GITHUB_USER_URL

    name	directory under $LOCAL_SRC_TREE to process

Exit codes:
    0	all is OK
    1	operation failed
    2	print help and exit
    3	command line error
 >=10	internal error

$NAME version: $VERSION"


# parse args
#
while getopts :hnvVg:s:u: flag; do
    case "$flag" in
    h) echo "$USAGE"
       exit 2
       ;;
    v) V_FLAG="-v"
       ;;
    V) echo "$VERSION"
	exit 2
       ;;
    n) N_FLAG="-n"
       ;;
    g) LOCAL_GIT_TREE="$OPTARG"
       ;;
    s) LOCAL_SRC_TREE="$OPTARG"
       ;;
    u) GITHUB_USER="$OPTARG"
       GITHUB_REPO_BASE="git@github.com:$GITHUB_USER"
       GITHUB_USER_URL="https://github.com/$GITHUB_USER"
       ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    esac
done
shift $(( OPTIND - 1 ));
if [[ $# -ne 1 ]]; then
    echo "$0: ERROR: expected 1 arg" 1>&2
    echo "$USAGE" 1>&2
    exit 3
fi
export NAME="$1"
export DIR="$LOCAL_SRC_TREE/$NAME"
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: NAME: $NAME"
    echo "$0: notice: DIR: $DIR"
    echo "$0: notice: LOCAL_GIT_TREE: $LOCAL_GIT_TREE"
    echo "$0: notice: LOCAL_SRC_TREE: $LOCAL_SRC_TREE"
    echo "$0: notice: GITHUB_USER: $GITHUB_USER"
    echo "$0: notice: GITHUB_REPO_BASE: $GITHUB_REPO_BASE"
    echo "$0: notice: GITHUB_USER_URL: $GITHUB_USER_URL"
fi

# verify dirname is a writable directory under $LOCAL_SRC_TREE
#
if [[ ! -e $DIR ]]; then
    echo "$0: directory does not exist: $DIR" 1>&2
    exit 1
fi
if [[ ! -d $DIR ]]; then
    echo "$0: does not a directory: $DIR" 1>&2
    exit 1
fi
if [[ ! -w $DIR ]]; then
    echo "$0: does not a writable directory: $DIR" 1>&2
    exit 1
fi

# verify directory is under git control and NOT under RCS
#
if [[ ! -d $DIR/.git ]]; then
    echo "$0: not under git control: $DIR" 1>&2
    exit 1
fi
if [[ -d $DIR/RCS ]]; then
    echo "$0: still under RCS control: $DIR" 1>&2
    exit 1
fi

# move into the directory
#
status=0
cd "$DIR" || status="$?"
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: cd $DIR failed, exit code: $status" 1>&2
    exit 10
fi

# check for only local origin
#
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: git remote"
fi
GIT_REMOTE=$(git remote)
status="$?"
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: git remote failed, exit code: $status" 1>&2
    exit 11
fi
if [[ $GIT_REMOTE != "origin" ]]; then
    echo "$0: ERROR: git remote is not origin: $GIT_REMOTE" 1>&2
    exit 12
fi
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: git remote get-url origin"
fi
export GIT_LOCAL_REPO_PATH="$LOCAL_GIT_TREE/$NAME"
export GIT_LOCAL_REPO_PATH_GIT="$GIT_LOCAL_REPO_PATH.git"
GIT_REMOTE_ORIGIN=$(git remote get-url origin)
if [[ $GIT_REMOTE_ORIGIN != "$GIT_LOCAL_REPO_PATH" && $GIT_REMOTE_ORIGIN != "$GIT_LOCAL_REPO_PATH_GIT" ]]; then
    echo "$0: ERROR: git remote get-url origin: $GIT_REMOTE_ORIGIN is neither $GIT_LOCAL_REPO_PATH nor $GIT_LOCAL_REPO_PATH_GIT" 1>&2
    exit 13
fi

# verify that the local git repo exists
#
if [[ -d $GIT_LOCAL_REPO_PATH ]]; then
    LOCAL_GIT_REPO_DIR="$GIT_LOCAL_REPO_PATH"
elif [[ -d $GIT_LOCAL_REPO_PATH_GIT ]]; then
    LOCAL_GIT_REPO_DIR="$GIT_LOCAL_REPO_PATH_GIT"
else
    echo "$0: ERROR: local git repo directory missing: $GIT_LOCAL_REPO_PATH_GIT" 1>&2
    exit 14
fi
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: found local git repo directory: $LOCAL_GIT_REPO_DIR"
fi

# sanity check that local git repo is an actual git repo
#
if [[ -e $LOCAL_GIT_REPO_DIR/.git ]]; then
    echo "$0: ERROR: found .git under local git repo directory: $LOCAL_GIT_REPO_DIR" 1>&2
    exit 15
fi
if [[ ! -e $LOCAL_GIT_REPO_DIR/HEAD ]]; then
    echo "$0: ERROR: missing HEAD under local git repo directory: $LOCAL_GIT_REPO_DIR" 1>&2
    exit 16
fi
if [[ ! -e $LOCAL_GIT_REPO_DIR/config ]]; then
    echo "$0: ERROR: missing config under local git repo directory: $LOCAL_GIT_REPO_DIR" 1>&2
    exit 17
fi

# verify we are on the master branch
#
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: git branch --show-current"
fi
CURRENT_BRANCH=$(git branch --show-current)
status="$?"
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: git branch --show-current failed, exit code: $status" 1>&2
    exit 18
fi
if [[ $CURRENT_BRANCH != master ]]; then
    echo "$0: ERROR: git branch --show-current is not master: $CURRENT_BRANCH" 1>&2
    exit 19
fi

# fetch all remote branches and tags
#
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: git fetch origin"
fi
if [[ -z $N_FLAG ]]; then
    git fetch origin
    status="$?"
    if [[ $status -ne 0 ]]; then
	echo "$0: ERROR: git fetch origin failed, exit code: $status" 1>&2
	exit 20
    fi
fi

# verify that the local git repo is clean
#
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: git status --porcelain"
fi
IS_CLEAN=$(git status --porcelain)
status="$?"
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: git status --porcelain failed, exit code: $status" 1>&2
    exit 21
fi
if [[ -n $IS_CLEAN ]]; then
    echo "$0: ERROR: local git repo is not clean: $IS_CLEAN" 1>&2
    exit 22
fi

# require that an non-empty GitHub repo exists now
#
export GITHUB_REPO_REMOTE="$GITHUB_REPO_BASE/$NAME"
export GITHUB_REPO_REMOTE_GIT="$GITHUB_REPO_REMOTE.git"
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: git ls-remote $GITHUB_REPO_REMOTE_GIT 2>/dev/null"
fi
GITHUB_LS_REMOTE=$(git ls-remote "$GITHUB_REPO_REMOTE_GIT" 2>/dev/null)
status="$?"
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: cannot find GitHub repo: $GITHUB_REPO_REMOTE_GIT" 1>&2
    exit 23
fi
if [[ -z $GITHUB_LS_REMOTE ]]; then
    echo "$0: ERROR: git ls-remote $GITHUB_REPO_REMOTE_GIT is empty" 1>&2
    exit 24
elif [[ -n $V_FLAG ]]; then
    echo "$0: notice: GitHub is: $GITHUB_REPO_REMOTE_GIT"
fi

# move to top of source above where name is found
#
status=0
cd "$LOCAL_SRC_TREE" || status="$?"
if [[ $status -ne 0 ]]; then
    echo "$0: ERROR: cd $LOCAL_SRC_TREE failed, exit code: $status" 1>&2
    exit 25
fi
if [[ ! -d $NAME ]]; then
    echo "$0: ERROR: $NAME is not a directory under $LOCAL_SRC_TREE" 1>&2
    exit 26
fi

# verify that GitHub has updated data
#
GITHUB_REPO_URL="$GITHUB_USER_URL/$NAME"
echo
echo "$0: notice: visit and verify GitHub contents: $GITHUB_REPO_URL"
echo
read -r -p "Press return when done, or ^C to abort: "
echo

# remove the local git repo tree
#
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: rm -rf $LOCAL_GIT_REPO_DIR"
fi
if [[ -z $N_FLAG ]]; then
    rm -rf "$LOCAL_GIT_REPO_DIR"
    status="$?"
    if [[ $status -ne 0 ]]; then
	echo "$0: ERROR: rm -rf $LOCAL_GIT_REPO_DIR failed, exit code: $status" 1>&2
	exit 27
    fi

    # verify local git repo is now gone
    #
    if [[ -e $LOCAL_GIT_REPO_DIR ]]; then
	echo "$0: ERROR: local git repo still exists: $LOCAL_GIT_REPO_DIR" 1>&2
	exit 28
    elif [[ -n $V_FLAG ]]; then
	echo "$0: notice: local git repo removed: $LOCAL_GIT_REPO_DIR"
    fi
fi

# remove the local src tree
#
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: rm -rf $DIR"
fi
if [[ -z $N_FLAG ]]; then
    rm -rf "$DIR"
    status="$?"
    if [[ $status -ne 0 ]]; then
	echo "$0: ERROR: rm -rf $DIR failed, exit code: $status" 1>&2
	exit 29
    fi

    # verify local git repo is now gone
    #
    if [[ -e $DIR ]]; then
	echo "$0: ERROR: local src tree still exists: $DIR" 1>&2
	exit 30
    elif [[ -n $V_FLAG ]]; then
	echo "$0: notice: local src tree removed: $DIR"
    fi
fi

# clone the GitHub repo
#
if [[ -n $V_FLAG ]]; then
    echo "$0: notice: git clone $GITHUB_REPO_REMOTE_GIT"
fi
if [[ -z $N_FLAG ]]; then
    git clone "$GITHUB_REPO_REMOTE_GIT"
    status="$?"
    if [[ $status -ne 0 ]]; then
	echo "$0: ERROR: git clone $GITHUB_REPO_REMOTE_GIT failed, exit code: $status" 1>&2
	exit 31
    fi

    # verify local git repo exists
    #
    if [[ ! -d $DIR ]]; then
	echo "$0: ERROR: local src tree for $NAME is missing: $DIR" 1>&2
	exit 32
    fi
    if [[ ! -d $DIR/.git ]]; then
	echo "$0: ERROR: local src .git tree for $NAME is missing: $DIR/.git" 1>&2
	exit 33
    fi

    # move to top of source above where name is found
    #
    status=0
    cd "$DIR" || status="$?"
    if [[ $status -ne 0 ]]; then
	echo "$0: ERROR: cd $DIR failed, exit code: $status" 1>&2
	exit 34
    fi

    # set branch master upstream branch
    #
    if [[ -n $V_FLAG ]]; then
	echo "$0: notice: git branch --set-upstream-to=origin/master"
    fi
    if [[ -z $N_FLAG ]]; then
	git branch --set-upstream-to=origin/master
	status="$?"
	if [[ $status -ne 0 ]]; then
	    echo "$0: ERROR: git branch --set-upstream-to=origin/master failed, exit code: $status" 1>&2
	    exit 35
	fi
    fi
fi

# All Done!!! -- Jessica Noll, Age 2
#
echo
echo "$0: notice: cd $DIR && make clobber all && sudo make install"
exit 0
