#!/bin/bash -
#
# clonelocalgit - clone a git repo from a ocal repo
#
# @(#) $Revision$
# @(#) $Id$
# @(#) $Source$
#
# Copyright (c) 2016 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll, http://www.isthe.com/chongo/index.html) /\oo/\
#
# Share and enjoy! :-)

# setup
#
export USAGE="usage: $0 [-h] [-n] [-v] [-r repotree] repo_name parent_dir

	-h            print this message and exit

	-r repotree   tree on hostname containing reponame.git (def: /usr/global/git)

        -n            do not create anything
	-v            be verbose

	repo_name    name of the git repo under repotree (without the .git)
	parent_dir   clone the git repo under parent_dir/repo_name"
export LOC_REPO_TREE="/usr/global/git"
export VERBOSE=""
export NO_OP=""

# parse args
#
while getopts :hr:nv flag; do
    case "$flag" in
    h) echo "$USAGE" 1>&2;
       exit 0
       ;;
    r) LOC_REPO_TREE="$OPTARG"
       ;;
    n) NO_OP="-n"
       ;;
    v) VERBOSE="-v"
       ;;
    ?) echo "$0: FATAL: unknown or invalid -flag" 1>&2 ;
       echo "$USAGE" 1>&2 ;
       exit 1
       ;;
    esac
done
shift $(( OPTIND - 1 ));
if [[ $# -ne 2 ]]; then
    echo "$0: FATAL: expected 2 args" 1>&2 ;
    echo "$USAGE" 1>&2 ;
    exit 2
fi
export REPO_NAME="$1"
export PARENT_DIR="$2"

# firewall
#
if [[ ! -d "$PARENT_DIR" ]]; then
    echo "$0: FATAL: not a directory: $DIR" 1>&2
    exit 3
fi
if [[ -e "$PARENT_DIR/$REPO_NAME" ]]; then
    echo "$0: FATAL: directory exists: $PARENT_DIR/$REPO_NAME" 1>&2
    exit 4
fi

# determine if readlink --canonicalize-existing works
#
# Some systems, such as older OS X, do not have a readlink
# with a --canonicalize-existing argument.
#
export HAS_CANONICALIZE_EXISTING="true"
if ! readlink --canonicalize-existing . >/dev/null 2>&1; then
    HAS_CANONICALIZE_EXISTING=""
fi

# convert $PARENT_DIR to an canonicalized absolute path
#
export CANON_DIR
if [[ -n $HAS_CANONICALIZE_EXISTING ]]; then
    CANON_DIR=$(readlink --canonicalize-existing "$PARENT_DIR" 2>/dev/null)
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: cannot canonicalize $PARENT_DIR, error code: $status" 1>&2
	exit 5
    fi
    if [[ -z "$CANON_DIR" ]]; then
	echo "$0: FATAL: DIR canonicalized $DIR to empty string" 1>&2
	exit 6
    fi
else
    CANON_DIR=$(dirname "$PARENT_DIR")/$(basename "$PARENT_DIR")
fi

# move to the parent directory
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: cd $CANON_DIR" 1>&2
fi
cd "$CANON_DIR"
status="$?"
if [[ "$status" -ne 0 ]]; then
    echo "$0: FATAL: cannot cd $CANON_DIR, error code: $status" 1>&2
    exit 7
fi

# determine if $LOC_REPO_TREE is same filesystem as $CANON_DIR
#
export CLONE_ARG="--no-hardlinks"
if df -P -- "$LOC_REPO_TREE" "$CANON_DIR" | awk 'NR==2 {dev1=$1} NR==3 {exit($1!=dev1)}'; then
    CLONE_ARG=""
fi

# git clone
#
if [[ -n "$VERBOSE" ]]; then
    if [[ -z "$CLONE_ARG" ]]; then
	echo "$0: Notice: git clone --local $LOC_REPO_TREE/$REPO_NAME" 1>&2
    else
	echo "$0: Notice: git clone --local $CLONE_ARG $LOC_REPO_TREE/$REPO_NAME" 1>&2
    fi
fi
if [[ -z "$NO_OP" ]]; then
    if [[ -z "$CLONE_ARG" ]]; then
	git clone --local "$LOC_REPO_TREE/$REPO_NAME"
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git clone error: $status" 1>&2
	    exit 8
	fi
    else
	git clone --local "$CLONE_ARG" "$LOC_REPO_TREE/$REPO_NAME"
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git clone error: $status" 1>&2
	    exit 9
	fi
    fi
    if [[ ! -d "$CANON_DIR/$REPO_NAME" ]]; then
	echo "$0: FATAL: clone did not form directory: $CANON_DIR/$REPO_NAME" 1>&2
	exit 10
    fi
fi

# move to the cloned directory
#
if [[ -z "$NO_OP" ]]; then
    if [[ -n "$VERBOSE" ]]; then
       echo "$0: Notice: cd $CANON_DIR/$REPO_NAME" 1>&2
    fi
    cd "$CANON_DIR/$REPO_NAME"
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: cannot cd $CANON_DIR/$REPO_NAME, error code: $status" 1>&2
	exit 11
    fi
fi

# show git remote
#
if [[ -n "$VERBOSE" && -z "$NO_OP" ]]; then
    echo "$0: Notice: git remote -v" 1>&2
    git remote -v
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: git remote error: $status" 1>&2
	exit 12
    fi
fi

# All Done!!! -- Jessica Noll, Age 2
#
exit 0
