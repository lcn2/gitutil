#!/usr/bin/env bash
#
# rcs2git - convert an RCS directory into directory under git control
#
# Copyright (c) 2016,2021,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll, http://www.isthe.com/chongo/index.html) /\oo/\
#
# Share and enjoy! :-)

# setup
#
export VERSION="1.0.0 2025-03-17"
export LOC_REPO_DIR="/usr/local/git"
export NO_COMMIT=""
export NO_ADD=""
export NO_CLONE=""
export COMMIT_MSG="from RCS to git via rcs-fast-export"
export RCS_FAST_EXPORT="/usr/local/bin/rcs-fast-export"
export KEEP=""
export VERBOSE=""
export NO_OP=""
NAME=$(basename "$0")
export NAME
#
export USAGE="usage: $NAME [-h] [-v] [-V] [-n] [-a] [-b] [-r locrepo] [-c] [-m commit] [-x tool] [-k] dir

    -h          print this message and exit
    -v          be verbose
    -V          print version string and exit

    -n          do not create anything

    -a          do not commit (def: add all and commit)
    -b          do not add, do not commit (def: add all and commit)
    -r locrepo  directory of the local git repo (def: $LOC_REPO_DIR)
    -c          do not clone to locrepo (def: bare clone to locrepo)
    -m commit   use commit message when committing (def: 'from RCS to git via rcs-fast-export')
    -x tool     path to the rcs-fast-export tool (def: /usr/local/bin/rcs-fast-export)
    -k          keep RCS directory (def: remove RCS after sucessful git conversion)

    dir         directory to place under git control

$NAME version: $VERSION"

# parse args
#
while getopts :habr:cm:x:knvV flag; do
    case "$flag" in
    h) echo "$USAGE" 1>&2;
       exit 0
       ;;
    a) NO_COMMIT="true"
       ;;
    b) NO_ADD="true"
       NO_COMMIT="true"
       ;;
    r) LOC_REPO_DIR="$OPTARG"
       ;;
    c) NO_CLONE="true"
       ;;
    m) COMMIT_MSG="$OPTARG"
       ;;
    x) RCS_FAST_EXPORT="$OPTARG"
       ;;
    k) KEEP="true"
       ;;
    n) NO_OP="-n"
       ;;
    v) VERBOSE="-v"
       ;;
    V) echo "$VERSION"
	exit 2
       ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    esac
done
shift $(( OPTIND - 1 ));
if [[ $# -ne 1 ]]; then
    echo "$0: FATAL: expected only 1 directory argument" 1>&2 ;
    echo "$USAGE" 1>&2 ;
    exit 2
fi
export DIR="$1"

# firewall
#
if [[ ! -e "$DIR" ]]; then
    echo "$0: FATAL: directory does not exist: $DIR" 1>&2
    exit 4
fi
if [[ ! -d "$DIR" ]]; then
    echo "$0: FATAL: not a directory: $DIR" 1>&2
    exit 5
fi
if [[ ! -e "$LOC_REPO_DIR" ]]; then
    echo "$0: FATAL: repo directory does not exist: $LOC_REPO_DIR" 1>&2
    exit 6
fi
if [[ ! -d "$LOC_REPO_DIR" ]]; then
    echo "$0: FATAL: repo is not a directory: $LOC_REPO_DIR" 1>&2
    exit 7
fi
if [[ ! -x "$RCS_FAST_EXPORT" ]]; then
    echo "$0: FATAL: missing executable rcs-fast-report tool: $RCS_FAST_EXPORT" 1>&2
    exit 8
fi

# determine if readlink --canonicalize-existing works
#
# Some systems, such as older OS X, do not have a readlink
# with a --canonicalize-existing argument.
#
export HAS_CANONICALIZE_EXISTING="true"
if ! readlink --canonicalize-existing . >/dev/null 2>&1; then
    HAS_CANONICALIZE_EXISTING=""
fi

# convert directory to an canonicalized absolute path
#
export CANON_DIR
if [[ -n $HAS_CANONICALIZE_EXISTING ]]; then
    CANON_DIR=$(readlink --canonicalize-existing "$DIR" 2>/dev/null)
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: cannot canonicalize $DIR, error code: $status" 1>&2
	exit 9
    fi
    if [[ -z "$CANON_DIR" ]]; then
	echo "$0: FATAL: DIR canonicalized $DIR to empty string" 1>&2
	exit 10
    fi
else
    CANON_DIR=$(perl -MCwd -e 'print Cwd::realpath($ARGV[0]), "\n"' "$DIR")
fi
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: CANON_DIR: $CANON_DIR" 1>&2
fi

# move to the parent directory
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: cd $CANON_DIR" 1>&2
fi
export CD_FAILED=""
cd "$CANON_DIR" || CD_FAILED="true"
if [[ -n $CD_FAILED ]]; then
    echo "$0: ERROR: cd $CANON_DIR failed" 1>&2
    exit 11
fi
if [[ -n $VERBOSE ]]; then
    echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
fi

# reject if there is a similarly named git repo under $LOC_REPO_DIR
#
REPO_NAME=$(basename "$CANON_DIR")
export REPO_NAME
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: REPO_NAME: $REPO_NAME" 1>&2
fi
if [[ -e "$LOC_REPO_DIR/$REPO_NAME" ]]; then
    echo "$0: FATAL: similarly named git repo found under: $LOC_REPO_DIR/$REPO_NAME" 1>&2
    exit 12
fi
if [[ -e "$LOC_REPO_DIR/$REPO_NAME.git" ]]; then
    echo "$0: FATAL: similarly named git repo found under: $LOC_REPO_DIR/$REPO_NAME.git" 1>&2
    exit 13
fi

# reject if already under git control or a sub-directory is under git control
#
if git rev-parse --is-inside-work >/dev/null 2>&1; then
    GIT_DIR_PATH=$(git rev-parse --git-dir 2>/dev/null)
    export GIT_DIR_PATH
    if [[ -z "$GIT_DIR_PATH" ]]; then
	echo "$0: FATAL: $DIR is under git control, but .git is unknown" 1>&2
    else
	if [[ -n $HAS_CANONICALIZE_EXISTING ]]; then
	    NEW_GIT_DIR_PATH=$(readlink --canonicalize-existing "$GIT_DIR_PATH" 2>/dev/null)
	else
	    NEW_GIT_DIR_PATH=$(dirname "$GIT_DIR_PATH")/$(basename "$GIT_DIR_PATH")
	fi
	if [[ -z "$NEW_GIT_DIR_PATH" ]]; then
	    echo "$0: FATAL: $DIR is under git control: $GIT_DIR_PATH" 1>&2
	else
	    echo "$0: FATAL: $DIR is under git control: $NEW_GIT_DIR_PATH" 1>&2
	fi
    fi
    exit 14
fi

# reject if sub-directory is under git control
#
SUB_GIT=$(find . -type d -name .git 2>/dev/null | head -1)
if [[ -n "$SUB_GIT" ]]; then
    if [[ -n $HAS_CANONICALIZE_EXISTING ]]; then
	NEW_SUB_GIT=$(readlink --canonicalize-existing "$SUB_GIT" 2>/dev/null)
    else
	NEW_SUB_GIT=$(dirname "$SUB_GIT")/$(basename "$SUB_GIT")
    fi
    if [[ -z "$NEW_SUB_GIT" ]]; then
	echo "$0: FATAL: a sub-directory of $DIR appears to be under git control: $SUB_GIT" 1>&2
    else
	echo "$0: FATAL: a sub-directory of $DIR appears to be under git control: $NEW_SUB_GIT" 1>&2
    fi
    exit 15
fi
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: $DIR is not under git control" 1>&2
fi

# reject if not under RCS
#
if [[ ! -d RCS ]]; then
    echo "$0: FATAL: $DIR is missing an RCS sub-directory" 1>&2
    exit 16
fi

# put the directory under git
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: git init" 1>&2
fi
if [[ -z "$NO_OP" ]]; then
    git init
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: git init error: $status" 1>&2
	exit 17
    fi
fi

# convert RCS to git via rcs-fast-export
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: $RCS_FAST_EXPORT --ignore RCS/.OLD . | git fast-import && git reset" 1>&2
fi
if [[ -z "$NO_OP" ]]; then
    $RCS_FAST_EXPORT . | git fast-import && git reset
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: rcs-fast-export error: $status" 1>&2
	exit 18
    fi
fi

# unless -b, add all files under the directory
#
if [[ -z "$NO_ADD" ]]; then
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: git add -v ." 1>&2
    fi
    if [[ -z "$NO_OP" ]]; then
	if [[ -n "$VERBOSE" ]]; then
	    git add -v .
	    status="$?"
	    if [[ "$status" -ne 0 ]]; then
		echo "$0: FATAL: git add error: $status" 1>&2
		exit 19
	    fi
	else
	    git add .
	    status="$?"
	    if [[ "$status" -ne 0 ]]; then
		echo "$0: FATAL: git add error: $status" 1>&2
		exit 20
	    fi
	fi
    fi
else
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: git add skipped due to -b" 1>&2
    fi
fi

# unless -a, commit add files
#
if [[ -z "$NO_COMMIT" ]]; then
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: git commit -m '$COMMIT_MSG' $VERBOSE" 1>&2
    fi
    if [[ -z "$NO_OP" ]]; then
	if [[ -n "$VERBOSE" ]]; then
	    git commit -m "$COMMIT_MSG" -v
	    status="$?"
	    if [[ "$status" -ne 0 ]]; then
		echo "$0: FATAL: git commit error: $status" 1>&2
		exit 21
	    fi
	else
	    git commit -m "$COMMIT_MSG"
	    status="$?"
	    if [[ "$status" -ne 0 ]]; then
		echo "$0: FATAL: git commit error: $status" 1>&2
		exit 22
	    fi
	fi
    fi
else
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: git commit skipped due to -a" 1>&2
    fi
fi

# unless -c, clone a bare repo under $LOC_REPO_DIR/$REPO_NAME.git
#
if [[ -z "$NO_CLONE" ]]; then

    # cd to $LOC_REPO_DIR
    #
    if [[ -n "$VERBOSE" ]]; then
       echo "$0: Notice: cd $LOC_REPO_DIR" 1>&2
    fi
    export CD_FAILED=""
    cd "$LOC_REPO_DIR" || CD_FAILED="true"
    if [[ -n $CD_FAILED ]]; then
	echo "$0: ERROR: cd $LOC_REPO_DIR failed" 1>&2
	exit 23
    fi
    if [[ -n $VERBOSE ]]; then
	echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
    fi

    # determine if $LOC_REPO_DIR is same filesystem as $CANON_DIR
    #
    export CLONE_ARG="--no-hardlinks"
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: df -P -- $LOC_REPO_DIR $CANON_DIR | awk 'NR==2 {dev1=$1} NR==3 {exit($1!=dev1)}'"
    fi
    if df -P -- "$LOC_REPO_DIR" "$CANON_DIR" | awk 'NR==2 {dev1=$1} NR==3 {exit($1!=dev1)}'; then
	CLONE_ARG=""
    fi

    # git clone
    #
    if [[ -n "$VERBOSE" ]]; then
	if [[ -z "$CLONE_ARG" ]]; then
	    echo "$0: Notice: git clone --bare --local $CANON_DIR" 1>&2
	else
	    echo "$0: Notice: git clone --bare --local $CLONE_ARG $CANON_DIR" 1>&2
	fi
    fi
    if [[ -z "$NO_OP" ]]; then
	if [[ -z "$CLONE_ARG" ]]; then
	    git clone --bare --local "$CANON_DIR"
	    status="$?"
	    if [[ "$status" -ne 0 ]]; then
		echo "$0: FATAL: git clone error: $status" 1>&2
		exit 24
	    fi
	else
	    git clone --bare --local "$CLONE_ARG" "$CANON_DIR"
	    status="$?"
	    if [[ "$status" -ne 0 ]]; then
		echo "$0: FATAL: git clone error: $status" 1>&2
		exit 25
	    fi
	fi
    fi

    # cd back to the directory
    #
    if [[ -n "$VERBOSE" ]]; then
       echo "$0: Notice: cd $CANON_DIR" 1>&2
    fi
    export CD_FAILED=""
    cd "$CANON_DIR" || CD_FAILED="true"
    if [[ -n $CD_FAILED ]]; then
	echo "$0: ERROR: cd $CANON_DIR failed" 1>&2
	exit 26
    fi
    if [[ -n $VERBOSE ]]; then
	echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
    fi

    # set git remote
    #
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: git remote -v add origin $LOC_REPO_DIR/$REPO_NAME" 1>&2
    fi
    if [[ -z "$NO_OP" ]]; then
	if [[ -n "$VERBOSE" ]]; then
	    git remote -v add origin "$LOC_REPO_DIR/$REPO_NAME"
	else
	    git remote add origin "$LOC_REPO_DIR/$REPO_NAME"
	fi
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git remote error: $status" 1>&2
	    exit 27
	fi
    fi

    # git fetch
    #
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: git fetch $VERBOSE" 1>&2
    fi
    if [[ -z "$NO_OP" ]]; then
	if [[ -n "$VERBOSE" ]]; then
	    git fetch -v
	else
	    git fetch
	fi
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git fetch error: $status" 1>&2
	    exit 28
	fi
    fi

    # show git remote
    #
    if [[ -n "$VERBOSE" && -z "$NO_OP" ]]; then
	echo "$0: Notice: git remote -v" 1>&2
	git remote -v
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git remote error: $status" 1>&2
	    exit 29
	fi
    fi
else
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: cd $CANON_DIR skipped due to -c" 1>&2
	echo "$0: Notice: skipped due to -c: git clone --bare --local $CANON_DIR" 1>&2
	echo "$0: Notice: skipped due to -c: git remote add origin $LOC_REPO_DIR/$REPO_NAME" 1>&2
	echo "$0: Notice: skipped due to -c: git fetch" 1>&2
	echo "$0: Notice: skipped due to -c: git remote -v" 1>&2
    fi
fi

# unless -k, remove RCS
#
if [[ -z "$KEEP" ]]; then
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: rm -rf RCS" 1>&2
    fi
    if [[ -z "$NO_OP" ]]; then
	rm -rf RCS
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: rm -rf RCS errir: $status" 1>&2
	    exit 30
	fi
	if [[ -e RCS ]]; then
	    echo "$0: FATAL: RCS sub-directory still exists: $status" 1>&2
	    exit 31
	fi
    fi
else
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: not removing RCS because -k was used" 1>&2
    fi
fi

# All Done!!! -- Jessica Noll, Age 2
#
exit 0
