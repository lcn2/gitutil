#!/usr/bin/env bash
#
# mkgitrepo - make remote bare repo on localhost from from a dir under git
#
# Copyright (c) 2016,2021,2023-2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!


# setup
#
export VERSION="1.0.0 2025-03-17"
export LOC_REPO_DIR="/usr/local/git"
export VERBOSE=""
export NO_OP=""
NAME=$(basename "$0")
export NAME
#
export USAGE="usage: $NAME [-h] [-v] [-V] [-n] [-r locrepo] dir

    -h          print this message and exit
    -v          be verbose
    -V          print version string and exit

    -n          do not create anything

    -r locrepo  directory of the local git repo (def: $LOC_REPO_DIR)

    dir	    directory that bare repo under $LOC_REPO_DIR is cloned from

$NAME version: $VERSION"

# parse args
#
while getopts :hr:nvV flag; do
    case "$flag" in
    h) echo "$USAGE" 1>&2;
       exit 0
       ;;
    r) LOC_REPO_DIR="$OPTARG"
       ;;
    n) NO_OP="-n"
       ;;
    v) VERBOSE="-v"
       ;;
    V) echo "$VERSION"
	exit 2
       ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    esac
done
shift $(( OPTIND - 1 ));
if [[ $# -ne 1 ]]; then
    echo "$0: FATAL: expected only 1 directory argument" 1>&2 ;
    echo "$USAGE" 1>&2 ;
    exit 2
fi
export DIR="$1"

# firewall
#
if [[ ! -e "$DIR" ]]; then
    echo "$0: FATAL: directory does not exist: $DIR" 1>&2
    exit 4
fi
if [[ ! -d "$DIR" ]]; then
    echo "$0: FATAL: not a directory: $DIR" 1>&2
    exit 5
fi
if [[ ! -e "$LOC_REPO_DIR" ]]; then
    echo "$0: FATAL: repo directory does not exist: $LOC_REPO_DIR" 1>&2
    exit 6
fi
if [[ ! -d "$LOC_REPO_DIR" ]]; then
    echo "$0: FATAL: repo is not a directory: $LOC_REPO_DIR" 1>&2
    exit 7
fi

# determine if readlink --canonicalize-existing works
#
# Some systems, such as older OS X, do not have a readlink
# with a --canonicalize-existing argument.
#
export HAS_CANONICALIZE_EXISTING="true"
if ! readlink --canonicalize-existing . >/dev/null 2>&1; then
    HAS_CANONICALIZE_EXISTING=""
fi

# convert directory to an canonicalized absolute path
#
export CANON_DIR
if [[ -n $HAS_CANONICALIZE_EXISTING ]]; then
    CANON_DIR=$(readlink --canonicalize-existing "$DIR" 2>/dev/null)
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: cannot canonicalize $DIR, error code: $status" 1>&2
	exit 8
    fi
    if [[ -z "$CANON_DIR" ]]; then
	echo "$0: FATAL: DIR canonicalized $DIR to empty string" 1>&2
	exit 9
    fi
else
    CANON_DIR=$(perl -MCwd -e 'print Cwd::realpath($ARGV[0]), "\n"' "$DIR")
fi
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: CANON_DIR: $CANON_DIR" 1>&2
fi

# move to the parent directory
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: cd $CANON_DIR" 1>&2
fi
export CD_FAILED=""
cd "$CANON_DIR" || CD_FAILED="true"
if [[ -n $CD_FAILED ]]; then
    echo "$0: ERROR: cd $CANON_DIR failed" 1>&2
    exit 10
fi
if [[ -n $VERBOSE ]]; then
    echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
fi

# reject if there is a similarly named git repo under $LOC_REPO_DIR
#
REPO_NAME=$(basename "$CANON_DIR")
export REPO_NAME
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: REPO_NAME: $REPO_NAME" 1>&2
fi
if [[ -e "$LOC_REPO_DIR/$REPO_NAME" ]]; then
    echo "$0: FATAL: similarly named git repo found under: $LOC_REPO_DIR/$REPO_NAME" 1>&2
    exit 11
fi
if [[ -e "$LOC_REPO_DIR/$REPO_NAME.git" ]]; then
    echo "$0: FATAL: similarly named git repo found under: $LOC_REPO_DIR/$REPO_NAME.git" 1>&2
    exit 12
fi

# reject if not under git control or a sub-directory is under git control
#
if ! git rev-parse --is-inside-work >/dev/null 2>&1; then
    echo "$0: FATAL: $DIR is not under git control" 1>&2
    exit 12
fi

# move to the bare repo under $LOC_REPO_DIR/$REPO_NAME.git
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: cd $LOC_REPO_DIR" 1>&2
fi
export CD_FAILED=""
cd "$LOC_REPO_DIR" || CD_FAILED="true"
if [[ -n $CD_FAILED ]]; then
    echo "$0: ERROR: cd $LOC_REPO_DIR failed" 1>&2
    exit 8
fi
if [[ -n $VERBOSE ]]; then
    echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
fi

# determine if $LOC_REPO_DIR is same filesystem as $CANON_DIR
#
export CLONE_ARG="--no-hardlinks"
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: df -P -- $LOC_REPO_DIR $CANON_DIR | awk 'NR==2 {dev1=$1} NR==3 {exit($1!=dev1)}'"
fi
if df -P -- "$LOC_REPO_DIR" "$CANON_DIR" | awk 'NR==2 {dev1=$1} NR==3 {exit($1!=dev1)}'; then
    CLONE_ARG=""
fi

# git clone
#
if [[ -n "$VERBOSE" ]]; then
    if [[ -z "$CLONE_ARG" ]]; then
	echo "$0: Notice: git clone --bare --local $CANON_DIR" 1>&2
    else
	echo "$0: Notice: git clone --bare --local $CLONE_ARG $CANON_DIR" 1>&2
    fi
fi
if [[ -z "$NO_OP" ]]; then
    if [[ -z "$CLONE_ARG" ]]; then
	git clone --bare --local "$CANON_DIR"
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git clone error: $status" 1>&2
	    exit 13
	fi
    else
	git clone --bare --local "$CLONE_ARG" "$CANON_DIR"
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git clone error: $status" 1>&2
	    exit 14
	fi
    fi
fi

# move back to the parent directory
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: cd $CANON_DIR" 1>&2
fi
export CD_FAILED=""
cd "$CANON_DIR" || CD_FAILED="true"
if [[ -n $CD_FAILED ]]; then
    echo "$0: ERROR: cd $CANON_DIR failed" 1>&2
    exit 15
fi
if [[ -n $VERBOSE ]]; then
    echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
fi

# show any existing git remote
#
if [[ -n "$VERBOSE" && -z "$NO_OP" ]]; then
    echo "$0: Notice: git remote -v" 1>&2
    git remote -v
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: git remote error: $status" 1>&2
	exit 15
    fi
fi

# remove an existing remote origin if one exists
#
if [[ -z "$NO_OP" ]]; then
    if [[ -n "$VERBOSE" ]]; then
	echo "$0: Notice: git remote" 1>&2
    fi
    git remote
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: git remote error: $status" 1>&2
	exit 16
    fi
    GIT_REMOTE=$(git remote)
    if [[ -z "$GIT_REMOTE" ]]; then
	if [[ -n "$VERBOSE" ]]; then
	    echo "$0: Notice: no origin currently exists" 1>&2
	fi
    else
	if [[ -n "$VERBOSE" ]]; then
	    echo "$0: Notice: git remote -v show origin" 1>&2
	    git remote -v show origin
	else
	    git remote show origin >/dev/null 2>&1
	fi
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    if [[ -n "$VERBOSE" ]]; then
		echo "$0: Notice: no remote origin currently exists" 1>&2
	    fi
	else
	    if [[ -n "$VERBOSE" ]]; then
		echo "$0: Notice: git remote -v remove origin" 1>&2
	    fi
	    if [[ -n "$VERBOSE" ]]; then
		git remote -v remove origin
	    else
		git remote remove origin
	    fi
	    status="$?"
	    if [[ "$status" -ne 0 ]]; then
		echo "$0: FATAL: git remote remote origin error: $status" 1>&2
		exit 17
	    fi
	fi
    fi
else
    echo "$0: Notice: skipping test for existing remote origin due to -n" 1>&2
fi

# set git remote
#
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: git remote -v add origin $LOC_REPO_DIR/$REPO_NAME" 1>&2
fi
if [[ -z "$NO_OP" ]]; then
    if [[ -n "$VERBOSE" ]]; then
	git remote -v add origin "$LOC_REPO_DIR/$REPO_NAME"
    else
	git remote add origin "$LOC_REPO_DIR/$REPO_NAME"
    fi
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: git remote error: $status" 1>&2
	exit 18
    fi
fi

# git fetch
#
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: git fetch $VERBOSE" 1>&2
fi
if [[ -z "$NO_OP" ]]; then
    if [[ -n "$VERBOSE" ]]; then
	git fetch -v
    else
	git fetch
    fi
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: git fetch error: $status" 1>&2
	exit 19
    fi
fi

# show git remote
#
if [[ -n "$VERBOSE" && -z "$NO_OP" ]]; then
    echo "$0: Notice: git remote -v" 1>&2
    git remote -v
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: git remote error: $status" 1>&2
	exit 20
    fi
fi

# All Done!!! -- Jessica Noll, Age 2
#
exit 0
