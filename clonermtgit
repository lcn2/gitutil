#!/usr/bin/env bash
#
# clonermtgit - clone a git repo from a remote host via ssh
#
# Copyright (c) 2016,2021,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!


# setup
#
export VERSION="1.0.0 2025-03-17"
export LOC_REPO_TREE="/usr/local/git"
export VERBOSE=""
export NO_OP=""
NAME=$(basename "$0")
export NAME
#
export USAGE="usage: $NAME [-h] [-v] [-V] [-n] [-r repotree] repo_host repo_name parent_dir

	-h            print this message and exit
	-v            be verbose
	-V            print version string and exit

	-n            do not create anything

	-r repotree   tree on hostname containing reponame.git (def: $LOC_REPO_TREE)

	repo_host    hostname containing the tree of git repos
	repo_name    name of the git repo under repotree (without the .git)
	parent_dir   clone the git repo under parent_dir/repo_name

$NAME version: $VERSION"

# parse args
#
while getopts :hr:nvV flag; do
    case "$flag" in
    h) echo "$USAGE" 1>&2;
       exit 0
       ;;
    r) RMT_REPO_TREE="$OPTARG"
       ;;
    n) NO_OP="-n"
       ;;
    v) VERBOSE="-v"
       ;;
    V) echo "$VERSION"
	exit 2
       ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    esac
done
shift $(( OPTIND - 1 ));
if [[ $# -ne 3 ]]; then
    echo "$0: FATAL: expected 3 args" 1>&2 ;
    echo "$USAGE" 1>&2 ;
    exit 2
fi
export REPO_HOST="$1"
export REPO_NAME="$2"
export PARENT_DIR="$3"

# firewall
#
if [[ ! -d "$PARENT_DIR" ]]; then
    echo "$0: FATAL: not a directory: $PARENT_DIR" 1>&2
    exit 4
fi
if [[ -e "$PARENT_DIR/$REPO_NAME" ]]; then
    echo "$0: FATAL: directory exists: $PARENT_DIR/$REPO_NAME" 1>&2
    exit 5
fi

# determine if readlink --canonicalize-existing works
#
# Some systems, such as older OS X, do not have a readlink
# with a --canonicalize-existing argument.
#
export HAS_CANONICALIZE_EXISTING="true"
if ! readlink --canonicalize-existing . >/dev/null 2>&1; then
    HAS_CANONICALIZE_EXISTING=""
fi

# convert $PARENT_DIR to an canonicalized absolute path
#
export CANON_DIR
if [[ -n $HAS_CANONICALIZE_EXISTING ]]; then
    CANON_DIR=$(readlink --canonicalize-existing "$PARENT_DIR" 2>/dev/null)
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: cannot canonicalize $PARENT_DIR, error code: $status" 1>&2
	exit 6
    fi
    if [[ -z "$CANON_DIR" ]]; then
	echo "$0: FATAL: DIR canonicalized $CANON_DIR to empty string" 1>&2
	exit 7
    fi
else
    CANON_DIR=$(perl -MCwd -e 'print Cwd::realpath($ARGV[0]), "\n"' "$CANON_DIR")
fi
if [[ -n "$VERBOSE" ]]; then
    echo "$0: Notice: CANON_DIR: $CANON_DIR" 1>&2
fi

# move to the parent directory
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: cd $CANON_DIR" 1>&2
fi
export CD_FAILED=""
cd "$CANON_DIR" || CD_FAILED="true"
if [[ -n $CD_FAILED ]]; then
    echo "$0: ERROR: cd $CANON_DIR failed" 1>&2
    exit 8
fi
if [[ -n $VERBOSE ]]; then
    echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
fi

# clone $REPO_NAME
#
if [[ -n "$VERBOSE" ]]; then
   echo "$0: Notice: git clone -v git+ssh://$REPO_HOST$RMT_REPO_TREE/$REPO_NAME" 1>&2
fi
if [[ -z "$NO_OP" ]]; then
    if [[ -n "$VERBOSE" ]]; then
	git clone -v "git+ssh://$REPO_HOST$RMT_REPO_TREE/$REPO_NAME"
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git clone error: $status" 1>&2
	    exit 9
	fi
    else
	git clone "git+ssh://$REPO_HOST$RMT_REPO_TREE/$REPO_NAME"
	status="$?"
	if [[ "$status" -ne 0 ]]; then
	    echo "$0: FATAL: git clone error: $status" 1>&2
	    exit 10
	fi
    fi
    if [[ ! -d "$CANON_DIR/$REPO_NAME" ]]; then
	echo "$0: FATAL: clone did not form directory: $CANON_DIR/$REPO_NAME" 1>&2
	exit 11
    fi
fi

# move to the cloned directory
#
if [[ -z "$NO_OP" ]]; then
    if [[ -n "$VERBOSE" ]]; then
       echo "$0: Notice: cd $CANON_DIR/$REPO_NAME" 1>&2
    fi
    export CD_FAILED=""
    cd "$CANON_DIR/$REPO_NAME" || CD_FAILED="true"
    if [[ -n $CD_FAILED ]]; then
	echo "$0: ERROR: cd $CANON_DIR failed" 1>&2
	exit 12
    fi
    if [[ -n $VERBOSE ]]; then
	echo "$0: debug[3]: now in directory: $(/bin/pwd)" 1>&2
    fi
fi

# show git remote
#
if [[ -n "$VERBOSE" && -z "$NO_OP" ]]; then
    echo "$0: Notice: git remote -v" 1>&2
    git remote -v
    status="$?"
    if [[ "$status" -ne 0 ]]; then
	echo "$0: FATAL: git remote error: $status" 1>&2
	exit 13
    fi
fi

# All Done!!! -- Jessica Noll, Age 2
#
exit 0
